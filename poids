import torch.backends.cudnn as cudnn
import torch.optim
import torch.utils.data
import torchvision.transforms as transforms
from datasets import *
from utils import *
from nltk.translate.bleu_score import corpus_bleu
import torch.nn.functional as F
from tqdm import tqdm
from nlgeval import NLGEval
from models import DecoderWithAttention
import torch
import torch.nn as nn
# Parameters

data_folder = 'final_dataset'  # folder with data files saved by create_input_files.py
data_name = 'coco_5_cap_per_img_5_min_word_freq'  # base name shared by data files
checkpoint_file ='checkpoint_coco_5_cap_per_img_5_min_word_freq.pth.tar'#'BEST_9checkpoint_coco_5_cap_per_img_5_min
_word_freq.pth.tar'#'checkpoint_coco_5_cap_per_img_5_min_word_freq.pth.tar'# 'BEST_34checkpoint_coco_5_cap_per_img_
5_min_word_freq.pth.tar'  # model checkpoint
word_map_file = 'WORDMAP_coco_5_cap_per_img_5_min_word_freq.json'  # word map, ensure it's the same the data was en
coded with and the model was trained with
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")  # sets device for model and PyTorch tensors
cudnn.benchmark = True  # set to true only if inputs to model are fixed size; otherwise lot of computational overhe
ad
# Load model
torch.nn.Module.dump_patches = True
checkpoint = torch.load(checkpoint_file,map_location = device)
decoder = checkpoint['decoder']

try:
    state_dict = decoder.module.state_dict()
except AttributeError:
    state_dict = model.state_dict()
    
torch.save(model.state_dict(), "model_poids")
